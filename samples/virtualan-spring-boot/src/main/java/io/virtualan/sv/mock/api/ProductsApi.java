/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.virtualan.sv.mock.api;

import io.virtualan.sv.mock.to.Error;
import io.virtualan.sv.mock.to.Product;
import io.swagger.annotations.*;
import io.virtualan.annotation.ApiVirtual;
import io.virtualan.annotation.VirtualService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-04-11T00:52:21.637-05:00[America/Chicago]")
@Validated
@Api(value = "products", description = "the products API")
@VirtualService
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /products : Product Types
     * The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.
     *
     * @param latitude Latitude component of location. (required)
     * @param longitude Longitude component of location. (required)
     * @return An array of products (status code 200)
     *         or Unexpected error (status code 400)
     */
    @ApiVirtual
    @ApiOperation(value = "Product Types", nickname = "productsGet", notes = "The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.", response = Product.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "apikey")
         }, tags={ "Products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An array of products", response = Product.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Unexpected error", response = Error.class) })
    @GetMapping(
        value = "/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Product>> productsGet(@NotNull @ApiParam(value = "Latitude component of location.", required = true) @Valid @RequestParam(value = "latitude", required = true) Double latitude,@NotNull @ApiParam(value = "Longitude component of location.", required = true) @Valid @RequestParam(value = "longitude", required = true) Double longitude) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"product_id\" : \"product_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"capacity\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
