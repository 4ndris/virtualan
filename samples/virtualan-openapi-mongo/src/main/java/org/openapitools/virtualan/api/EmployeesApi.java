/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.virtualan.api;

import org.openapitools.virtualan.to.Employee;
import org.openapitools.virtualan.to.Error;
import io.swagger.annotations.*;
import io.virtualan.annotation.ApiVirtual;
import io.virtualan.annotation.VirtualService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-12T09:46:05.173-05:00[America/Chicago]")

@Validated
@Api(value = "employees", description = "the employees API")
@VirtualService
public interface EmployeesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /employees : Create a Employee
     * Create a new Employee object.
     *
     * @param employee  (optional)
     * @return Employee created (status code 201)
     *         or Employee exists already. Choose another name. (status code 400)
     *         or Invalid input. (status code 405)
     *         or unexpected error (status code 200)
     */
    @ApiVirtual
    @ApiOperation(value = "Create a Employee", nickname = "createEmployee", notes = "Create a new Employee object.", tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Employee created"),
        @ApiResponse(code = 400, message = "Employee exists already. Choose another name."),
        @ApiResponse(code = 405, message = "Invalid input."),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/employees",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createEmployee(
        @ApiParam(value = "") @Valid @RequestBody(required = false) Employee employee) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employees/{employeeId} : The GET Employee
     * Sample path
     *
     * @param employeeId The id of the employee (required)
     * @return Employee (status code 200)
     *         or Employee Invalid ID (status code 400)
     *         or Employee not found (status code 404)
     *         or unexpected error (status code 200)
     */
    @ApiVirtual
    @ApiOperation(value = "The GET Employee", nickname = "employeeById", notes = "Sample path", response = Employee.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Employee", response = Employee.class),
        @ApiResponse(code = 400, message = "Employee Invalid ID"),
        @ApiResponse(code = 404, message = "Employee not found"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/employees/{employeeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Employee> employeeById(
        @ApiParam(value = "The id of the employee", required = true) @PathVariable("employeeId") String employeeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gender\" : \"0.0.1\", \"name\" : \"Elan\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
